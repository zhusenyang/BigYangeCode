<?xml version="1.0" encoding="UTF-8"?>
<!--设置log4j2的自身log级别为warn-->
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，
    当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="warn" monitorInterval="30">
    <!--全局参数-->
    <Properties>
        <!--<Property name="logPath">/export/Logs/bt-middle-data-main</Property>-->
        <Property name="logPath">/WebSite</Property>
    </Properties>
    <!--先定义所有的appender-->
    <appenders>
        <!--这个输出控制台的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <!--<ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>-->
            <!--输出日志的格式-->
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}-%t] [%p] - %l - %m%n"/>
        </console>
        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
        <!--<File name="log" fileName="log/test.log" append="false">-->
        <!--<PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>-->
        <!--</File>-->
        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，
        则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileInfo" fileName="${logPath}/info.log"
                     filePattern="${logPath}/info_%d{yyyy-MM-dd}.log">
            <!--<Filters>-->
            <!--&lt;!&ndash;控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）&ndash;&gt;-->
            <!--<ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>-->
            <!--&lt;!&ndash;<ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>&ndash;&gt;-->
            <!--</Filters>-->
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}-%t] [%p] - %l - %m%n"/>
            <Policies>
                <!--按照filePattern 时间单位 interval 间隔生成文件-->
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                <!--定了当日志文件达到了指定的size时，触发rollover操作。size参数可以用KB、MB、GB等做后缀来指定具体的字节数-->
                <!--<SizeBasedTriggeringPolicy size="1G"/>-->
            </Policies>
        </RollingFile>


    </appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--过滤掉spring和hibernate的一些无用的debug信息-->
        <logger name="org.springframework" level="INFO">
            <appender-ref ref="RollingFileInfo"/>
        </logger>
        <logger name="org.elasticsearch" level="INFO">
        </logger>
        <logger name="org.mybatis" level="INFO">
            <appender-ref ref="RollingFileInfo"/>
        </logger>
        <!-- 将业务dao接口填写进去,并用控制台输出即可 additivity=false 避免重复打印   -->
        <logger name="com.boot.dao.UserDao" level="debug" additivity="false">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileInfo"/>
        </logger>
        <logger name="com.boot.dao.LoginHistoryDao" level="debug" additivity="false">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileInfo"/>
        </logger>

        <logger name="com.boot.dao.ArticleMapper" level="debug" additivity="false">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileInfo"/>
        </logger>

        <logger name="com.boot.dao.ArticleTypeMapper" level="debug" additivity="false">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileInfo"/>
        </logger>

        <root level="info">
            <appender-ref ref="Console"/>
        </root>
    </loggers>

</configuration>